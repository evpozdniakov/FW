<?phpclass ModelManager{	/*	->distinct()	->fields(str_or_arr)	->filter(str)	->extra(str)	->order_by(str)	->format(str)	----------------------	->_count()	->_ordernum(field) - порядковый номер	->_slice(start[,end])	->_slice(start,end,step) - не реализован	->_get(id)	->_delete()	*/	function ModelManager($model_name,$params_arr=''){		if(constant('USE_CACHE')){			//если кэширование активировано, то собираем список НЕ СПЕЦИАЛЬНЫХ моделей, 			//задействованных в создании страницы			if(mb_substr($model_name,0,1)!='_'){				$_cache_obj=&gmo('_cache');				$_cache_obj->addModel($model_name);			}		}		$this->model_name=$model_name;		$this->params_arr=$params_arr;	}	function getNewManager($params_arr){		return new ModelManager($this->model_name,$params_arr);	}	function distinct(){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем 		$params_arr_copy['distinct']=true;		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function domain($param_str_or_arr){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		if($param_str_or_arr===false){			$params_arr_copy['domain']=false;		}		return $this->getNewManager($params_arr_copy);	}	function fields($param_str_or_arr){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr=array();		$params_arr_copy=$this->params_arr;		if( !empty($param_str_or_arr) ){			if( is_array($param_str_or_arr) ){				$params_arr=$param_str_or_arr;			}elseif( is_string($param_str_or_arr) ){				$params_arr=_explode($param_str_or_arr);				foreach($params_arr as $key=>$value){					if(trim($value)==''){						unset($params_arr[$key]);					}				}			}		}		//если в массиве запрашиваемых полей отсутствует id, то добавляем его		if(!in_array('id',$params_arr)){			$params_arr[]='id';		}		if(count($params_arr)==0 || in_array('*',$params_arr)){			$params_arr_copy['fields']='*';		}else{			$params_arr_copy['fields']=$params_arr;		}		return $this->getNewManager($params_arr_copy);	}	function filter($param_str){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем новый фильтр		$params_arr_copy['filter'][]=$param_str;		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function rel($param_str){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем 		$params_arr_copy['rel']=$param_str;		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function extra($params_arr){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем новые параметры		if( isset($params_arr['select']) ){			$params_arr_copy['extra']['select']=$params_arr['select'];		}		if( isset($params_arr['from']) ){			$params_arr_copy['extra']['from']=$params_arr['from'];		}		if( isset($params_arr['where']) ){			//поскольку $params_arr['params'] может быть либо строкой, либо массивом, 			//либо вообще отсутствовать, то нам нужно действовать согласно ситуации			if( !empty($params_arr['params']) ){				if( is_array($params_arr['params']) ){					$where_clause=e5csql(array_unshift($params_arr['params'],$params_arr['where']));				}elseif( is_string($params_arr['params']) ){					$where_clause=e5csql(array($params_arr['where'],$params_arr['params']));				}			}else{				$where_clause=$params_arr['where'];			}			$params_arr_copy['extra']['where']=$where_clause;		}		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function order_by($param_str){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем новый(ые) параметр(ы) в массив (переопределяем старый(ые))		if(!isset($params_arr_copy['order_by'])){			$params_arr_copy['order_by']='';		}		$params_arr_copy['order_by'].=$param_str.',';		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function format($field='id'){		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем новый фильтр		$params_arr_copy['format']=$field;		//образуем новый объект ModelManager и возвращаем на него ссылку		return $this->getNewManager($params_arr_copy);	}	function _count(){		$params_arr_copy=$this->params_arr;		//добавляем новый(ые) параметр(ы) в массив (переопределяем старый(ые))		$params_arr_copy['extra']['select']='count(*) as count';		//сбрасываем поля, чтобы не участвовали в формировании запроса		unset($params_arr_copy['fields']);		//получаем результат		$result=$this->__select__($params_arr_copy);		$result=$result[0]['count'];		//возвращаем		return $result;	}	function _ordernum($id){		//для _ordernum не нужно выбирать ничего, кроме id		$this->params_arr['fields']=array('id');		if(isset($this->params_arr['extra']['select'])){			unset($this->params_arr['extra']['select']);		}		$params_arr_copy=$this->params_arr;		//получаем результат		$items_arr=$this->__select__($params_arr_copy);		$num=0;		foreach($items_arr as $item){			$num++;			if($id==$item['id']){				$result=$num;				break;			}		}		//возвращаем		return $result;	}	function _slice($start__array,$end='',$step=''){		//если к этому моменту $this->params_arr['fields'] пуст, 		//а также $this->params_arr['extra']['select'] пуст , то нужно присвоить ему *		if(!isset($this->params_arr['fields'])){			if(false				|| !isset($this->params_arr['extra']) 				|| !isset($this->params_arr['extra']['select']) 			){				$this->params_arr['fields']='*';			}		}		if(is_array($start__array)){			list($start,$end,$step)=$start__array;		}else{			$tmp_array=explode(',',$start__array);			$start=(isset($tmp_array[0]))?$tmp_array[0]:'';			$end=(isset($tmp_array[1]))?$tmp_array[1]:'';			$step=(isset($tmp_array[2]))?$tmp_array[2]:'';		}		if(empty($step)){			//если нам не задан $step, то выполняем простой слайс: _getSimpleSlice()			$result=$this->_getSimpleSlice($start,$end);		}else{			//иначеы выполняем серию слайсов: 			$result=array();			$current_item_index=$start;			while(true){				$start=$current_item_index;				$end=$start+1;				$tmp_array=$this->_getSimpleSlice($start,$end);				if(is_array($tmp_array) && count($tmp_array)>0){					$result[]=$tmp_array;					$current_item_index+=$step;				}else{					break;				}			}		}		return $result;	}	function _getSimpleSlice($start,$end=''){		$params_arr_copy=$this->params_arr;		//добавляем новый(ые) параметр(ы) в массив (переопределяем старый(ые))		$params_arr_copy['start']=$start;		if($end!=''){			$params_arr_copy['end']=$end;		}		//получаем результат		$result=$this->__select__($params_arr_copy);		//возвращаем		return $result;	}	function _get($id){		//если к этому моменту $this->params_arr['fields'] пуст, 		//а также $this->params_arr['extra']['select'] пуст , то нужно присвоить ему *		if(!isset($this->params_arr['fields'])){			if(false				|| !isset($this->params_arr['extra']) 				|| !isset($this->params_arr['extra']['select']) 			){				$this->params_arr['fields']='*';			}		}		//делаем копию имеющихся в данном объекте параметров запроса		$params_arr_copy=$this->params_arr;		//добавляем новый(ые) параметр(ы) в массив (переопределяем старый(ые))		if((int)$id>0){			$params_arr_copy['id']=(int)$id;			//получаем результат			$result=$this->__select__($params_arr_copy);			$result=$result[0];		}		//возвращаем		return $result;	}	function _delete($params_str=''){		if($params_str!=''){			$start_end=explode(',',$params_str);			$this->params_arr['start']=$start_end[0];			if($start_end[1]!=''){				$this->params_arr['end']=$start_end[1];			}		}		$params_arr=$this->params_arr;		// вытаскиваем id удаляемых элементов		$dbq=new DBQ('select id from `@` @ @',			$this->model_name,			$this->_getWhereClause($params_arr),			// не работает в mysql 3.23			//$this->_getOrderClause($params_arr),			$this->_getLimitClause($params_arr)		);		$this->query=$dbq->query;		//выполняем удаление		if($dbq->rows){			foreach($dbq->items as $item){				$model_item=gmi($this->model_name,$item);				$model_item->delete();			}		}	}	function __select__($params_arr){		if(isset($params_arr['rel'])){			$result=$this->_select_related($params_arr);		}else{			$result=$this->_easy_select($params_arr);		}		return $result;	}	function formatArr($arr,$key){		if(is_array($arr)){			$result=array();			foreach($arr as $item){				if(array_key_exists($key,$item) && !array_key_exists($item[$key],$result)){					$result[$item[$key]]=$item;				}else{_die('в строках массива '.export($arr).' ключи «'.$key.'» отсутствуют или повторяются');}			}		}		return $result;	}	//=================================================================	function _easy_select($params_arr){		// _log('call _easy_select');		// _log('_getDisctinctClause',$this->_getDisctinctClause($params_arr));		// _log('_getSelectClause',$this->_getSelectClause($params_arr));		// _log('_getFromClause',$this->_getFromClause($params_arr));		// _log('_getWhereClause',$this->_getWhereClause($params_arr));		// _log('_getOrderClause',$this->_getOrderClause($params_arr));		// _log('_getLimitClause',$this->_getLimitClause($params_arr));				$dbq=new DBQ('select @ @ @ @ @ @',			$this->_getDisctinctClause($params_arr),			$this->_getSelectClause($params_arr),			$this->_getFromClause($params_arr),			$this->_getWhereClause($params_arr),			$this->_getOrderClause($params_arr),			$this->_getLimitClause($params_arr)		);//_echo($dbq->query);		$this->query=$dbq->query;		$GLOBALS['modelmanager_query']=$dbq->query;		$result=$dbq->items;//_print_r($result);		if(isset($params_arr['format'])){			$result=$this->formatArr($result,$params_arr['format']);		}		return $result;	}	function _select_related($params_arr){		$result=array();		/*			отличие _select_related в том, что внутрь WHERE нужно включить конструкцию id in (1,2,3)			для этого сначала нужно получить этот самый список 1,2,3			и чтобы это сделать необходимо понять какая именно модель связана типом ManyToMany с текущей, 			ведь таких может быть несколько			привязанную модель необходимо найти с помощью только одной подсказки			этой подсказкой является $params_arr['rel'] который имеет значение вроде usages_id_key2=5432 или usages_id_key2 in (1230,42,34536,544,215,16)		*/		// когда две модели связаны друг с другом таблицей-связкой (вроде products_usages_rel)		// то в этой таблице имеются ключи двух типов: key1 (ключ основной модели) и key2 (ключ привязанной модели)		// изначально нам дано название одного из ключей (причем неизвестно, первого или второго), например products_id_key1		// и название одной из моделей (противоположной ключу), например usages		// необходимо найти: a) название другого ключа, б) название другой модели, в) название таблицы связки		list($given_key,$given_value)=explode('=',$params_arr['rel']);		$given_key=trim($given_key);		$given_value=trim($given_value);		// если передан ключ основной модели		if( mb_strpos($given_key,'_id_key1') ){			// название основной модели			$model1_name=trim(mb_substr($given_key,0,-8));			// основной ключ			$key1=$given_key;			// название привязанной модели			$model2_name=$this->model_name;			// второй ключ (он же искомый)			$required_key=$key2=$model2_name.'_id_key2';		}else{			// передан ключ привязанной модели			// привязанная модель			$model2_name=trim(mb_substr($given_key,0,-8));			// второй ключ			$key2=$given_key;			// основная модель			$model1_name=$this->model_name;			// первый ключ			$required_key=$key1=$model1_name.'_id_key1';		}		// чтобы найти поле-связку, перебираем все поля основной модели		// пока не найдем ManyToManyField с modelrel==$model2_name		$model_model1=gmo($model1_name);		foreach(get_object_vars($model_model1) as $field_name=>$obj_field){			if( is_object($obj_field) && is_a($obj_field,'ManyToManyField') ){				if( $obj_field->modelrel==$model2_name ){					$field_rel=$field_name;					$table_rel=$field_name.'_rel';					break;				}			}		}				if( !isset($field_rel) ){			_die(sprintf('полученные параметры ошибочны: $key1=%s, $model1_name=%s, $key2=%s, $model2_name=%s',$key1,$model1_name,$key2,$model2_name));		}		// убеждаемся, что у модели $model1_name есть поле-связка $field_rel		// $model1_obj=&gmo($model1_name);		// if(!is_object($model1_obj->$field_rel) || !is_a($model1_obj->$field_rel,'ManyToManyField')){		// 	_die('полученные параметры ошибочны: $model1_name='.$model1_name.', $model2_name='.$model2_name.', $field_rel='.$field_rel.'');		// }		//наконец, делаем запрос в таблицу-связку и вытаскиваем строку вида 1,2,3		$sql=e5csql('select @ as id from @ where @=@',$required_key,$table_rel,$given_key,$given_value);		// _print_r('$sql',$sql);		$dbq=new DBQ($sql);		if($dbq->rows){			$ids=groupArray('id',$dbq->items);			$ids=implode(',',array_keys($ids));			//теперь в $dbq->item находится строка вида 1,2,3			$params_arr['filter'][]=e5csql('id in (@)',$ids);			$result=$this->_easy_select($params_arr);		}else{			$params_arr['filter'][]='id in (0)';			$result=$this->_easy_select($params_arr);		}		return $result;	}	function _getDisctinctClause($params_arr){		$result=(isset($params_arr['distinct']) && $params_arr['distinct']===true)?'distinct':' ';		return $result;	}	function _getSelectClause($params_arr,$distinct=''){		//то что передано в extra.select нужно пустить первым		//чтобы отрабатывались правильно запросы типа select SQL_CALC_FOUND_ROWS id, `comments`.`id` from 		if(isset($params_arr['extra']) && isset($params_arr['extra']['select'])){			$select_clause=$params_arr['extra']['select'];		}		if(!isset($select_clause)){			//вызываем _getWellFormatedFieldsList или если $select_clause еще не определен			$select_clause=$this->_getWellFormatedFieldsList($params_arr['fields'],$distinct);		}elseif(isset($params_arr['fields'])){			if((is_string($params_arr['fields']) && $params_arr['fields']=='*') || (is_array($params_arr['fields']) && count($params_arr['fields'])>0)){				//или если что-то передано в $params_arr['fields']				$select_clause.=','.$this->_getWellFormatedFieldsList($params_arr['fields'],$distinct);			}		}		return $select_clause;	}	function _getWellFormatedFieldsList($fields_arr_or_star,$distinct){		$result='';		$obj_model=&gmo($this->model_name);		//перебираем все поля модели		foreach(get_object_vars($obj_model) as $field_name=>$obj_field){			//если они являются потомками класса Field			if(is_object($obj_field) && is_subclass_of($obj_field,'Field') && !is_a($obj_field,'ManyToManyField')){				if(false					|| $fields_arr_or_star=='*' //если запрашивались все поля					|| in_array($field_name,$fields_arr_or_star) //или если запрашивалось конкретное поле				){					$result.=$obj_field->getSQLselect();				}			}		}		if(mb_strlen($result)){			//убираем запятую в конце			$result=mb_substr(trim($result),0,-1);		}		return $result;	}	function _getWellFormatedMainFieldsList($fields_arr){		$obj_model=gmo($this->model_name);		foreach(get_object_vars($obj_model) as $field_name=>$obj_field){			if(is_subclass_of($obj_field,'Field')){				if(is_a($obj_field,'ManyToManyField')){continue;}				if( count($fields_arr)==0 || in_array($field_name,$fields_arr) ){					$result.=',`'.$this->model_name.'`.`'.$field_name.'` as '.$this->model_name.'$'.$field_name.'';				}			}		}		$result=mb_substr($result,1);		return $result;	}	function _addAllModelFieldsWithPrefix($model_name,$prefix){		$obj_model=gmo($model_name);		if(is_object($obj_model)){			foreach(get_object_vars($obj_model) as $field_name=>$obj_field){				if(is_subclass_of($obj_field, 'Field')){					$result.=',`'.$prefix.'`.`'.$field_name.'` as '.$prefix.'_'.$field_name.'';				}			}			$result=mb_substr($result,1);		}		return $result;	}	function _getFromClause($params_arr){		// $result='`'.$this->model_name.'` '.$this->rel_join_list.'';		$result=array();		$result[]=sprintf('from `%s`',$this->model_name);		if( isset($params_arr['extra']) && isset($params_arr['extra']['from']) ){			$result[]=$params_arr['extra']['from'];		}		return implode(' ',$result);	}	function _getWhereClause($params_arr){		$result='where 1';		//первоначально вытаскиваем элемент по id (если задан id) 		if(isset($params_arr['id'])){			$result.=' and id='.(int)$params_arr['id'];		}		//во вторую очередь вытаскиваем по фильтру		if(!empty($params_arr['filter'])){			if(is_array($params_arr['filter'])){				foreach($params_arr['filter'] as $filter){					if($filter){						$result.=' and '.$filter;					}				}			}		}		//затем добавляем фильтрацию по domain если нужно		if($params_arr['domain']!==false){			$obj_model=&gmo($this->model_name);			foreach(get_object_vars($obj_model) as $field_name=>$obj_field){				if(is_a($obj_field,'domainField')){					$result.=' and `'.$field_name.'`='.DOMAIN_ID;				}			}		}		//и наконец добавляем условие из extra		if(isset($params_arr['extra']) && isset($params_arr['extra']['where'])){			$result.=' and '.$params_arr['extra']['where'];		}		return $result;	}	function _getOrderClause($params_arr){		$order=(isset($params_arr['order_by']))?$params_arr['order_by']:'';		if(empty($order)){			//вытаскиваем дефолтный ordering			$obj_model=gmo($this->model_name);			if(isset($obj_model->__admin__['ordering'])){				$order=$obj_model->__admin__['ordering'];			}		}		$order_arr=explode(',',$order);		if(is_array($order_arr)){			$result='';			foreach($order_arr as $order){				if(trim($order)!=''){					if($order=='__random__'){						$result.='md5(rand()),';					}else{						$result.=$this->_getOrderField($order).' '.$this->_getOrderDirection($order).',';					}				}			}			if($result){				$result=mb_substr($result,0,-1);				$result='order by '.$result;//_echo('res='.$result);			}		}		return $result;	}	function _getOrderField($order){		$order=str_replace('-','',$order);		$order=str_replace('+','',$order);		$result='`'.$this->model_name.'`.`'.defvar('id',trim($order)).'`';		return $result;	}	function _getOrderDirection($order){		$order=trim($order);		$result=(mb_strpos($order,'-')===0)			?'desc'			:'asc';		return $result;	}	function _getLimitClause($params_arr){		$start=(isset($params_arr['start']))?$params_arr['start']:'';		$end=(isset($params_arr['end']))?$params_arr['end']:'';		if( intval($start)==0 && empty($end) ){			//оба числа не заданы, или задан только $start=0, значит лимит не делается, возвращаем пустую строку			$result=' ';		}else{			if( empty($end) ){				$result=sprintf('limit %d,18446744073709551615',$start);			}else{				$rows=$end-$start;				if($rows<=0){_die('неправильно заданы $start='.$start.' и $end='.$end);}				$result=sprintf('limit %d,%d',$start,$rows);			}		}		return $result;	}}