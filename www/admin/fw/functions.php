<?php/*	FRAMEWORK 	(для использования внутри _views.php и _models.php)*//** * метод получает имя модели * и возвращает ссылку на экземпляр (instance) модели, получая его * из Admin::getModelObj() */function &getModelObject($model_name){	$obj_model =& Admin::getModelObj($model_name);	return $obj_model;}/** * синоним getModelObject */function &gmo($model_name){	return getModelObject($model_name);}/** * создает новый элемент модели $model_name на основе массива $arr,  * если внутри $arr содержится ссылка на существующий id, * то будет возвращен существующий элемент модели с переопределенными * значениями других полей */function getModelItem($model_name,$arr){	$obj_model=&gmo($model_name);	if(!is_object($obj_model)){_die('не удалось создать объект модели по ее названию «'.$model_name.'»');}	$model_item=new $model_name($arr);	if(!is_a($model_item,$model_name)){_die('не удалось получить элемент модели «'.$model_name.'» на основе массива '.dump($arr));}	return $model_item;}/** * синоним getModelItem */function gmi($model_name,$arr){	return getModelItem($model_name,$arr);}/** * метод получает имя модели * и возвращает ссылку на экземпляр (instance) вида модели, получая его * из Admin::getModelView() * это бывает необходимо для вызова реализованных в классе методов * такая техника нежелательна, правильнее реализовывать методы в  * самой моделе (т.е. в файле _models.php а не в _views.php) */function &getModelViews($model_name){	$obj_view =& Admin::getModelView($model_name);	return $obj_view;}/** * синоним getModelViews */function &gmv($model_name){	return getModelViews($model_name);}/*** возвращает путь к разделу сайта по обработчику* путь зависит от того, к какому разделу сайта привязан обработчик* например, getPathByView('structure:map') возвратит строку '/map/'* если обработчик $view не передан, то будет возвращен путь к текущему разделу*/function getPathByView($view='',$domain=''){	if(!empty($view)){		//отыскиваем все страницы с обработчиком $view (фильтрация по языку происходит автоматически), 		//берем первый попавшийся, потому что если таких несколько, 		//то потенциальная ошибка висит на совести администратора сайта		$domain=defvar(DOMAIN_ID,$domain);		$pages=ga(array(			'classname'=>'structure',			'domain'=>false,			'fields'=>'id,parent',			'filter'=>e5csql('view=? and is_hidden="no" and domain=?',$view,$domain),//строка фильтра типа 'parent=32'			'_slice'=>'0',//строка 'n[,m]' возвращает массив элементов начиная с n (заканчивая m, если m передан)		));		if(count($pages)==1){			if($pages[0]['parent']==0){				$path='/';			}else{				$path=getPathById($pages[0]['id'],$domain);			}		}elseif(count($pages)==0){			_log('обработчик «'.$view.'» отсутствует в структуре сайта');			return false;		}else{			_log('обработчик «'.$view.'» не уникален, он присутствует в структуре сайта '.count($pages).' раз');			return false;		}	}else{		$path=DOMAIN_PATH.'/'.implode('/',$GLOBALS['path']).'/';	}	return $path;}/*** находит раздел с заданным id в структуре* и возвращает путь к нему*/function getPathById($id,$domain=''){	$model_structure=&gmo('structure');	$parent_id=defvar($model_structure->getStructureRootId(),$domain);	$result='/';	$domain=defvar(DOMAIN_ID,$domain);	while(true){		$pages=ga(array(			'classname'=>'structure',			'domain'=>false,//не учитывать домен			'fields'=>'parent,url',//список полей которые нужно вытащить через запятую 'id,name,body'			'filter'=>e5csql('id=? and domain=? and is_hidden="no"',$id,$domain),//строка фильтра типа 'parent=32'			'_slice'=>'0',//строка 'n[,m]' возвращает массив элементов начиная с n (заканчивая m, если m передан)		));		if(count($pages)==0 || $pages[0]['id']==$parent_id){			break;		}else{			$result='/'.$pages[0]['url'].$result;			$id=$pages[0]['parent'];		}	}	return DOMAIN_PATH.$result;}/*** gbi - сокращение от get by id* возвращает элемент какой-то модели, взятый из базы по id* с учетом фильтра $filter, который является фрагментом sql-запроса*/function gbi($model_name,$id,$filter=''){	$item=ga(array(		'classname'=>$model_name,		'filter'=>$filter,//строка фильтра типа 'parent=32'		'_get'=>$id,//число=id элемента, возвратит массив	));	return $item;}/*** ga - сокращение от get array, прослойка между FW и БД* очень популярный метод, следует его знать и использовать вместо* прямых запросов к БД, поскольку он собирает статистику по используемым * для формирования страницы моделям и использует ее для корректного сброса* закэшированных страниц* обычный вызов функции выглядит так (редко используемые опции закомментированы)*	$rows=ga(array(*		'classname'=>'',//'structure' - название модели*		//'distinct'=>true,//добавить distinct в запрос*		//'domain'=>false,//не учитывать домен*		'fields'=>'',//'id,name,body' - список полей которые нужно вытащить через запятую без пробелов*		'filter'=>e5csql(''),//e5csql('parent=?',$parent) - строка фильтра, желательно - но необязательно - использовать в связке с e5csql()*		//'rel'=>e5csql(''),//условие 'usages_id_key2=32' где usages это модель связанная с текущей моделью structure через таблицу structure_usages_rel (через поле типа ManyToManyField)*		//'extra'=>array(),//array('select'=>'id,body', 'where'=>e5csql('parent>?',$parent)) - массив с двумя ключами для добавления дополнительных опций в sql-запрос, в части select и where*		'order_by'=>'',//'parent,title' строка вида '-cdate' или 'parent, +name' которая трансформируется в order by запроса; допустима строка '__random__' для случайного порядка*		//'format'=>'',//название поля (например 'id'), значение которого будет лежать в ключах результирующего массива*		//'_obj'=>true,//возвратит элемет объекта mmanager к которому можно будет применить один из методов ->_xxx()*		//'_count'=>true,//возвратит кол-во элементов в выборке*		//'_ordernum'=>'',//число=id элемента. на выходе получаем его порядковый номер в выборке*		'_slice'=>'0',//строка 'n[,m]' возвращает массив элементов начиная с n (заканчивая m, если m передан)*		//'_get'=>'',//число=id элемента, возвратит массив*		//'_delete'=>'',//строка '[n[,m]]' или true. удалит элементы.*	));*/function ga($arr){		if(is_array($arr)){		if(!isset($arr['classname'])){			_die('не задан classname');		}		$mmanager=getModelObject($arr['classname']);		/*if(is_a($mmanager,'stdClass')){			_log(export($arr));			_log(export($mmanager));			_die('__stop');		}*/		$mmanager=$mmanager->objects();		foreach($arr as $key=>$value){			if($key=='classname'){continue;}			//если $value=true как для disctinc или _count, то нужно преобразовать его к пустой строке			$value=($value===true)?'':$value;			//как только мы нашли метод _xxx(), то сразу прерываем работу и возвращаем результат			if(mb_strpos($key,'_')===0){				if($key=='_obj'){//если запрашивается _obj(), значит нам нужно вернуть сам объект mmanager					$result=$mmanager;				}else{					$result=$mmanager->$key($value);				}				return $result;			}else{				//$value может быть массивом данных (а может и не быть)				//пишем универсальное решение				if(!is_array($value) || $key=='extra'){					$mmanager=$mmanager->$key($value);				}else{					foreach($value as $v){$mmanager=$mmanager->$key($v);}				}			}		}	}else{		_die('в ga() передан не массив «'.$arr.'»');	}	return $mmanager;}function p2v($str){//возвращает значение параметра по его имени	$result='';	if(!is_string($str)){		_die('stop');	}	if(is_array($_POST) && array_key_exists($str,$_POST)){		$result=$_POST[$str];	}elseif(is_array($_GET) && array_key_exists($str,$_GET)){		$result=$_GET[$str];	}	return $result;}function _crypt($str){//возвращает хэш строки	$crypt_method=CRYPT_METHOD;	$result=$crypt_method($str) or _die('отсутствует функция '.CRYPT_METHOD.'()');	return $result;}function hexit($str){//отдает браузеру заголовок $str и завершает работу текущего скрипта	if(IS_AJAX!==true){		header($str);		exit();	}else{		_die('попытка отправки заголовка во время выполнения ajax-запроса');	}}function hstatus($code) {	$arr=array(		100=>'Continue',		101=>'Switching Protocols',		200=>'OK',		201=>'Created',		202=>'Accepted',		203=>'Non-Authoritative Information',		204=>'No Content',		205=>'Reset Content',		206=>'Partial Content',		300=>'Multiple Choices',		301=>'Moved Permanently',		302=>'Found',		303=>'See Other',		304=>'Not Modified',		305=>'Use Proxy',		306=>'[Unused]',		307=>'Temporary Redirect',		400=>'Bad Request',		401=>'Unauthorized',		402=>'Payment Required',		403=>'Forbidden',		404=>'Not Found',		405=>'Method Not Allowed',		406=>'Not Acceptable',		407=>'Proxy Authentication Required',		408=>'Request Timeout',		409=>'Conflict',		410=>'Gone',		411=>'Length Required',		412=>'Precondition Failed',		413=>'Request Entity Too Large',		414=>'Request-URI Too Long',		415=>'Unsupported Media Type',		416=>'Requested Range Not Satisfiable',		417=>'Expectation Failed',		500=>'Internal Server Error',		501=>'Not Implemented',		502=>'Bad Gateway',		503=>'Service Unavailable',		504=>'Gateway Timeout',		505=>'HTTP Version Not Supported'	);	if(isset($arr[$code])){		$text=$code.' '.$arr[$code];		header($_SERVER["SERVER_PROTOCOL"].' '.$text);	}}function calcCurrency($money,$from_to){	//calcCurrency(1000,'rub eur') - переведет 1000 рублей в евро	//calcCurrency(1000,'eur rub') - переведет 1000 евро в рубли	//calcCurrency(1234,'USD JPY') - переведет 1234 доллара в японские йены	//доступны валюты (регистр не важен): RUB,AUD,GBP,BYR,DKK,USD,EUR,ISK,KZT,CAD,CNY,NOK,XDR,SGD,TRY,UAH,SEK,CHF,JPY	//проверяем, имеется ли файл с валютами за сегодняшнее число	//либо считываем его, либо создаем заново		$currencies_file=MODELS_DIR.'/currency.srlz';		if(file_exists($currencies_file) && date('Ymd')==date('Ymd',filemtime($currencies_file)) ){			$currencies_arr=file2str(MODELS_DIR,'currency.srlz');			$currencies_arr=unserialize($currencies_arr);		}else{			//получаем xml с сайта ЦБРФ			$cbrf=implode('',file('http://www.cbr.ru/scripts/XML_daily.asp?date_req='.date('d/m/Y')));			//преобразуем xml в массив			include_once(LIB_DIR.'/xml/easy_xml.php');			$cbrf=XML_unserialize($cbrf);			//формируем новый массив валют - попроще			if($cbrf && isset($cbrf['ValCurs']) && isset($cbrf['ValCurs']['Valute']) && is_array($cbrf['ValCurs']['Valute'])){				$currencies_arr=array();				$currencies_arr['RUB']=1;//в первую очередь добавляем рубли				foreach($cbrf['ValCurs']['Valute'] as $item){					$item['Value']=str_replace(',','.',$item['Value']);					if(isset($item['CharCode']) && isset($item['Value']) && isset($item['Nominal'])){						$currencies_arr[$item['CharCode']]=floatval($item['Value'])/intval($item['Nominal']);					}				}				fileWrite(MODELS_DIR,'currency.srlz',serialize($currencies_arr));			}		}//_print_r($currencies_arr);	//переводим валюту из одной в другую		$from_to=explode(' ',strtoupper($from_to));		$currency1=$currencies_arr[$from_to[0]];		$currency2=$currencies_arr[$from_to[1]];		$result=$money*$currency1/$currency2;	return $result;}function _include($src){	include(SITE_DIR.$src);}/*	SMARTY 	(работа функций связана с подготовкой и конечным выводом данных пользователю)*/function generalUsecacheConditions(){	/*		проверку на присутствие сессии пока закомментировал		использовать такую проверку означало бы запрет кэширования целого сайта		в случае если сессия используется, например, только для личного кабинета		считаю, что пользователь самостоятельно должен отслеживать использование кэширования		на страницах таких сайтов		|| array_key_exists(session_name(), $_GET)//исключаем кеширование страниц с SID в $_GET; p2v(session_name()) мы не можем использовать так-как SID присутствует в $_GET, то отсутствует в $_REQUEST	*/	$not_use=(bool)(false		|| USE_CACHE!==true //USE_CACHE проверяем в первую очередь, остальные по степени уменьшения вероятности		|| !empty($_POST)		|| $_SERVER['REQUEST_URI_BAK']		|| (IS_AJAX && AJAX_CACHE_ON!==true)		|| $GLOBALS['path'][1]=='admin' 		|| p2v('action') //хоть FW и не должна работать с get-запросами, но избежать их полностью не удастся, например на страницах поиска, именно поэтому мы оставляем проверку на p2v('action')	);	// _log('generalUsecacheConditions');	// _log(USE_CACHE!==true);	// _log(count($_POST));	// _log($_SERVER['REQUEST_URI_BAK']);	// _log(IS_AJAX && AJAX_CACHE_ON!==true);	// _log($GLOBALS['path'][1]=='admin');	// _log(p2v('action'));					return !$not_use;}function try2useCache(){	//общие условия	if(!generalUsecacheConditions()){return;}	//шифруем адрес запрашиваемой страницы	$cache_file_url=$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];	$cache_file_name=_crypt($cache_file_url);	//проверяем кеш на диске	$cache_file_content=file2str(CACHE_DIR, sprintf('%s.%s', $cache_file_name, (IS_AJAX===true)?'ajax':'http'));	if($cache_file_content){		// вытаскиваем время жизни кэша и его тип (записаны через дефис в первой строке)		$line_break_position=mb_strpos($cache_file_content,"\n");		$expired__type=mb_substr($cache_file_content,0,$line_break_position);		list($expired, $type)=explode('-',$expired__type);		// если страница не устарела, то определяем содержимое, 		// оно не должно быть пустым		if( intval($expired) >= (int)date('U') ){			$result=mb_substr($cache_file_content,$line_break_position+1);			if($result!=''){				// возвращаем содержимое в зависимости от типа				if(IS_AJAX===true){					$from_cache=true;					ajaxGzip($result, $type, $from_cache);				}else{					echo $result;					exit();				}			}		}	}}function month($num,$type='i'){	$num=(int)$num;	if($num>0 && $num<=12){		if(DOMAIN=='en'){			if($type=='r'){				$arrMoths=explode(',','january,february,march,april,may,june,july,august,september,october,november,december');			}elseif($type=='i'){				$arrMoths=explode(',','january,february,march,april,may,june,july,august,september,october,november,december');			}		}else{			if($type=='r'){				$arrMoths=explode(',','января,февраля,марта,апреля,мая,июня,июля,августа,сентября,октября,ноября,декабря');			}elseif($type=='i'){				$arrMoths=explode(',','январь,февраль,март,апрель,май,июнь,июль,август,сентябрь,октябрь,ноябрь,декабрь');			}		}		$result=$arrMoths[$num-1];	}else{		_die('невозможно определить месяц по $num=«'.$num.'»');	}	return $result;}function parseDate($str,$php_template=''){	$arr=explode(' ',$str);	$date=explode('-',$arr[0]);	$time=explode(':',$arr[1]);	if(is_array($date) && count($date)==3){		if(!checkdate($date[1],$date[2],$date[0])){return;}		$result['year']=$date[0];		$result['month']=$date[1];		$result['day']=$date[2];		$result['hour']=defvar('00',$time[0]);		$result['minute']=defvar('00',$time[1]);		$result['second']=defvar('00',$time[2]);	}else{		if(mb_strlen($str)==14){			//если мы оказались здесь, то на входе у нас строка типа timestamp - 14 цифирь			//пытаемся ее разобрать			$result['year']=(int)mb_substr($str,0,4);			$result['month']=(int)mb_substr($str,4,2);			$result['day']=(int)mb_substr($str,6,2);			$result['hour']=(int)mb_substr($str,8,2);			$result['minute']=(int)mb_substr($str,10,2);			$result['second']=(int)mb_substr($str,12,2);		}else{			return false;		}	}	if( $php_template ){		$date_object=mktime($result['hour'],$result['minute'],$result['second'],$result['month'],$result['day'],$result['year']);		if( $php_template=='object' ){			$result=$date_object;		}else{			$result=date($php_template,$date_object);		}	}	return $result;}function ulba($uri,$link,$bold,$active){//возвращает HTML-код ссылки в виде либо просто ссылки, либо жирного текста, либо жирной ссылки, в зависимости от URL	$request_uri=urldecode($_SERVER['REQUEST_URI']);	if(mb_strpos($uri,'://')){		$protocol=mb_substr($uri,0,mb_strpos($uri,'://'));		$request_uri=$protocol.'://'.SERVER_NAME.$request_uri;	}	if($request_uri==$uri){		$result=$bold;	}else{		if(mb_strpos($request_uri,$uri)===0){			$result=$active;		}else{			$result=$link;		}	}	return $result;}function getPagerInverse($hash){	$hash['inverse']=true;	$pager=getPager($hash);	return $pager;}function getPager($hash){	// pager работает в двух режимах:	// либо выводит все страницы, если их меньше $N	$N=10;	// либо выводит $M страниц, стараясь разместить текущую страницу в самом центре	$M=7;	// использование	// $pager=getPager(array(	// 	'count'=>$albums_count, 	// 	'ipp'=>$ipp, 	// 	'current'=>$current, 	// 	'inverse'=>false, 	// 	'bar'=>'', 	// 	'active'=>'<b>%d</b>',	// 	'link'=>'<a href="page%d.html">%d</a>',	// 	'forward_link'=>'<span class="next"><a href="gt">&gt;</a> <a href="page%d.html" class="text">следующая</a></span>',	// 	'forward_text'=>'<span class="next"><span class="gt">&gt;</span> <span class="text">следующая</span></span>',	// 	'backward_link'=>'<span class="prev"><a href="page%d.html" class="text">предыдущая</a> <a href="page%d.html" class="lt">&lt;</a></span>',	// 	'backward_text'=>'<span class="prev"><span class="text">предыдущая</span> <span class="lt">&lt;</span></span>',	// 	'wrap'=>'Страницы: {backward} <span class="pages">{pages}</span> {forward}',	// ));	$pages='';	$pages_count=ceil($hash['count']/$hash['ipp']);	if($pages_count<2){		return;	}elseif($pages_count<$N){		// если всего страниц меньше N - выводим все подряд		$from=$pages_count;		$to=0;	}else{		// если всего страниц больше N - выводим M страниц, стараясь поместить текущую по центру		$to=$hash['current'] - ceil($M/2);		if($to<0){			$to=0;		}		$from=$to + $M;		if($from>$pages_count){			$from=$pages_count;			$to=$from - $M;		}	}	if($hash['inverse']==true){		for($i=$from; $i>$to; $i--){			$pages.=($i!=$hash['current'])?'&lt;'.$i.'&gt;':'['.$i.']';			$pages.='|';		}	}else{		for($i=$to+1; $i<=$from; $i++){			$pages.=($i!=$hash['current'])?'&lt;'.$i.'&gt;':'['.$i.']';			$pages.='|';		}	}	$pages=mb_substr($pages,0,-1);		// ссылки вперед-назад	$page=($hash['current']>1)?($hash['current']-1):0;	$backward='&raquo;'.$page.'&raquo;';	$page=($hash['current']<$pages_count)?($hash['current']+1):0;	$forward='&laquo;'.$page.'&laquo;';		// добавляем разметку	// bar	$pages=_mb_str_replace('|',defvar('',$hash['bar']),$pages);	// active	$active=explode('%d',$hash['active']);	$pages=_mb_str_replace('[',$active[0],$pages);	$pages=_mb_str_replace(']',$active[1],$pages);	// link	while(true){		$lt_pos=mb_strpos($pages,'&lt;');		if($lt_pos===false){break;}		$gt_pos=mb_strpos($pages,'&gt;');		$page=intval(mb_substr($pages,$lt_pos+mb_strlen('&lt;')));		$pages=_mb_str_replace('&lt;'.$page.'&gt;',sprintf($hash['link'],$page,$page),$pages,1);	}	// forward	$laquo_pos=mb_strpos($forward,'&laquo;');	$page=intval(mb_substr($forward,$laquo_pos+mb_strlen('&laquo;')));	if($page && $hash['forward_link']){		$replace=_mb_str_replace('%d',$page,$hash['forward_link']);	}else{		$replace=defvar('',$hash['forward_text']);	}	$forward=_mb_str_replace('&laquo;'.$page.'&laquo;',$replace,$forward);	// backward	$raquo_pos=mb_strpos($backward,'&raquo;');	$page=intval(mb_substr($backward,$raquo_pos+mb_strlen('&raquo;')));	if($page && $hash['backward_link']){		$replace=_mb_str_replace('%d',$page,$hash['backward_link']);	}else{		$replace=defvar('',$hash['backward_text']);	}	$backward=_mb_str_replace('&raquo;'.$page.'&raquo;',$replace,$backward);	// оборачиваем	$pager=$hash['wrap'];	$pager=_mb_str_replace('{pages}',$pages,$pager);	$pager=_mb_str_replace('{backward}',$backward,$pager);	$pager=_mb_str_replace('{forward}',$forward,$pager);	return $pager;}/** * smartas сокращение от smarty assign * можно вызывать, передавая два параметра: smartas(<имя переменной>, <значение>); * или же один параметр: smartas(<массив имея переменной=>значение>); */function smartas($name__arr,$value=''){	if( !isset($GLOBALS['obj_client']) ){		$GLOBALS['obj_client']=new ClientSide();	}	if( is_array($name__arr) ){		$GLOBALS['obj_client']->assign($name__arr); 	}else{		$GLOBALS['obj_client']->assign($name__arr,$value); 	}}function display($template){	$GLOBALS['obj_client']->display($template);}function fetch($template){	return $GLOBALS['obj_client']->fetch($template);}function runfetch($model_method,$params=''){//функция предназначена для запуска метода и возврата html-кода, который генерит соответствующий tpl-Файл	list($model_name,$method)=explode('->',$model_method);	if(mb_substr($method,-2)=='()'){		$method=mb_substr($method,0,-2);	}	ob_start();	if( !isset($GLOBALS['obj_client']) ){		$GLOBALS['obj_client']=new ClientSide();	}	$GLOBALS['obj_client']->render(sprintf('%s->%s(%s)',$model_name,$method,defvar('',$params)));	$result=trim(ob_get_contents());	ob_end_clean();	return $result;}function showclientform($model_name,$acc_fields='',$native_data=''){//необходимо добавить самостоятельно теги <form></form> и кнопку submit	$obj_model=getModelObject($model_name);	if(is_string($acc_fields)){		$acc_fields=_explode($acc_fields);	}	echo $obj_model->getModelItemClientAddFormHTML($acc_fields,$native_data);}function mailclientform($model_name,$to,$subj,$message='',$fields_list_str=''){//$fields_list_str - перечень полей (через запятую без пробелов) которые нужно отправлять, если не задан, то отправляются все поля editable=true	$obj_model=getModelObject($model_name);	//определяем полный текст сообщения	$message.=$obj_model->getModelItemFieldsPairsHTML($fields_list_str);	htmlmail($to,$subj,$message);}// еще не тестировалfunction mailobjectdata($model_item,$to,$subj,$message='',$fields_list_str=''){//$fields_list_str - перечень полей (через запятую без пробелов) которые нужно отправлять, если не задан, то отправляются все поля editable=true	$model_obj=gmo($model_item->__name__);	$fields_list_str=_mb_str_replace(' ','',$fields_list_str);	$fields_list=explode(',',$fields_list_str);	foreach(get_object_vars($model_obj) as $field_name=>$field_obj){		if(count($fields_list)>0 && in_array($field_name, $fields_list)===false){continue;}		if(is_object($field_obj) && is_subclass_of($field_obj,'Field') && $field_obj->editable && $field_name!='id'){			//дополняем текст сообщения			$message.=sprintf('<p><b>%s:</b> %s</p>', $field_obj->txt_name, defvar('no data',nl2br(e5c($model_item->$field))));		}	}	// отправляем письмоы	htmlmail($to,$subj,$message);}function htmlmail($recipients,$subj,$message,$from='',$fromName='',$attached_files_arr='',$embeded_pictures_arr=''){	if( LOG_EMAIL===true ){		_log('htmlmail:','$recipients: '.$recipients, '$subj: '.$subj, '$message: '.$message);	}	if(strtolower(SITE_ENCODING)!='utf-8'){		$subj=iconv(SITE_ENCODING,'utf-8',$subj);		$message=iconv(SITE_ENCODING,'utf-8',$message);		$from=iconv(SITE_ENCODING,'utf-8',$from);		$fromName=iconv(SITE_ENCODING,'utf-8',$fromName);	}	require_once(LIB_DIR.'/Rmail/Rmail.php');	$mail = new Rmail();		if( defined('FROM_EMAIL') ){		$from=defvar(FROM_EMAIL,$from);	}	if(!empty($from)){		if( defined('FROM_NAME') ){			$fromName=defvar(FROM_NAME,$fromName);		}		if(!empty($fromName)){			$mail->setFrom(''.$fromName.' <'.$from.'>');		}else{			$mail->setFrom($from);		}	} else {		$mail->setFrom('no-reply@'.removeSubdomain());	}		$mail->setSubject($subj);	$mail->setHTML($message);	if(is_array($embeded_pictures_arr)){		foreach($embeded_pictures_arr as $item){			$mail->addEmbeddedImage(new fileEmbeddedImage($item));		}	}	if(is_array($attached_files_arr)){		foreach($attached_files_arr as $item){			$mail->addAttachment(new fileAttachment($item));		}	}	if( !is_array($recipients) ){		$recipients=_explode($recipients);	}	$recipients_arr=array();	foreach($recipients as $item){		$item=trim($item);		if(strtolower(SITE_ENCODING)!='utf-8'){			$item=iconv(SITE_ENCODING,'utf-8',$item);		}		$recipients_arr[]=$item;	}	return $mail->send($recipients_arr);}function textsms($phone__arr,$message,$from=''){	if( LOG_SMS===true ){		_log('textsms:', '$phone__arr:', $phone__arr, '$message:', $message, '$from:', $from);	}	if( is_string($phone__arr) ){		$phone__arr=array($phone__arr);	}	if( empty($from) ){		$from=SMS_SENDER;	}	if( removeSubdomain()!='meetafora.ru' ){		return array(true);	}else{		include_once(LIB_DIR.'/SMSPilot/smspilot.php');		// добавляем "7"		if( is_array($phone__arr) ){			$phones=array();			foreach($phone__arr as $phone){				$phone=getValidPhoneNumber($phone);				if( mb_strlen($phone)!=10 ){					// _die('textsms ожидает 10-значный телефонный номер');				}else{					$phones[]='7'.$phone;				}			}			if( sms($phones,$message,$from) ){				$success=true;				$message='';			}else{				$success=false;				$message=sms_error();			}		}		return array($success,$message);	}}/** * преобразуем полученную строку  * в десятизначный номер мобильного телефона: * отбрасываем все нецифровые символы * если полученная строка имеет 11 символов,  * убираем первый символ — это лидирующая семерка (восьмерка) */function getValidPhoneNumber($phone){	$phone=preg_replace('/[^0-9]/','',$phone);	if( mb_strlen($phone)==11 ){		// убираем лидирующий знак		$phone=mb_substr($phone,1);	}elseif( mb_strlen($phone)==10 ){		// оставляем без изменений	}else{		// сбрасываем		$phone='';	}	return $phone;}/** * получаем 10-значный номер мобильного телефона и преобразуем его к формату * +7(XXX) XXX-XX-XX *  */function formatPhoneNumber($phone, $format='+7(XXX) XXX-XX-XX'){	if( mb_strlen($phone)!=10 ){		_log('formatPhone: получен некорректный $phone:',$phone);	}else{		$figures=array();		for($i=0; $i<10; $i++){			$figures[]=intval( mb_substr($phone,$i,1) );		}		$format=_mb_str_replace('%','%%',$format);		$format=_mb_str_replace('X','%d',$format);		$phone=sprintf($format,$figures[0],$figures[1],$figures[2],$figures[3],$figures[4],$figures[5],$figures[6],$figures[7],$figures[8],$figures[9]);		return $phone;	}}function ajaxGzip($str__array, $type='json', $from_cache=false){	if( IS_AJAX!==true ){return;}	if( !$from_cache ){		if( $type=='json' ){			if( !is_array($str__array) ){				$str__array=str_replace("\n",' ',$str__array);				$str__array=str_replace("\t",' ',$str__array);				$str__array=str_replace("\\'","'",$str__array);				// некий символ, обнаруженный на девайсах				$str__array=str_replace('','',$str__array);				$str__array=json_decode($str__array);			}			$str__array=json_encode($str__array);		}		if(strtolower(SITE_ENCODING)!='utf-8'){			$str__array=iconv(SITE_ENCODING,'utf-8',$str__array);		}		if(USE_CACHE===true){			$_cache_obj=&gmo('_cache');			$_cache_obj->try2cache($str__array, $type);		}	}	header("Cache-Control: no-cache, must-revalidate");	header("Pragma: no-cache");	if($type=='html'){		header('Content-Type: text/html; charset=utf-8');	}else{		header('Content-Type: application/'.$type);		header("Accept-Charset: utf-8");	}	// if(mb_strpos($_SERVER['HTTP_ACCEPT_ENCODING'],'gzip')!==false){	// 	header('Content-Encoding: gzip');$str__array=gzencode($str__array);	// }	echo $str__array;	die();}/*	FILESYSTEM 	(чтение, запись, удаление файлов)*//** * функция пытается удалить файл $file_name из папки $dir * возвращает false только если файл существует и его не получилось удалить *  * папка $dir является либо абсолютной, либо относительной от корня сайта * (если папка $dir отсутствует, проверяется существование папки SITE_DIR.$dir) */function try2unlink($dir, $file_name=''){//try to unlink	// если папка $dir не существует, то добавляем SITE_DIR	if( !file_exists($dir) ){		if( !file_exists(SITE_DIR.$dir) ){			_die('ошибка в fileWrite(): отсутствует папки для записи файла: ', $dir, SITE_DIR.$dir);		}else{			$dir=SITE_DIR.$dir;		}	}	// добавляем заключительный слэш	$dir=realpath($dir).'/';	// отправляем false лишь если его вернет unlink	$result=true;	if( !empty($file_name) && file_exists($dir.$file_name) ){		$result=unlink($dir.$file_name);	}	return $result;}/** * функция читает и возвращает содержимое файла $file_name * из папки $dir * или false если файл не найден *  * папка $dir является либо абсолютной, либо относительной от корня сайта * (если папка $dir отсутствует, проверяется существование папки SITE_DIR.$dir) */function file2str($dir, $file_name=''){//$dir от корня, без DOCUMENT_ROOT	// если папка $dir не существует, то добавляем SITE_DIR	if( !file_exists($dir) ){		if( !file_exists(SITE_DIR.$dir) ){			_die('ошибка в fileWrite(): отсутствует папки для записи файла: ', $dir, SITE_DIR.$dir);		}else{			$dir=SITE_DIR.$dir;		}	}	// добавляем заключительный слэш	$dir=realpath($dir).'/';	// вытаскиваем контент если файл существует	if(!empty($file_name) && file_exists($dir.$file_name)){		$result=file_get_contents($dir.$file_name);	}else{		$result=false;	}	return $result;}/** * функция создает/изменяет файл с именем $file_name * в папке $dir * помещая в него контент $text * и изменяя его права, если передан параметр $chmod *  * папка $dir является либо абсолютной, либо относительной от корня сайта * (если папка $dir отсутствует, проверяется существование папки SITE_DIR.$dir) */function fileWrite($dir,$file_name,$text,$chmod=''){	// если папка $dir не существует, то добавляем SITE_DIR	if( !file_exists($dir) ){		if( !file_exists(SITE_DIR.$dir) ){			_die('ошибка в fileWrite(): отсутствует папки для записи файла: ', $dir, SITE_DIR.$dir);		}else{			$dir=SITE_DIR.$dir;		}	}	// добавляем заключительный слэш	$dir=realpath($dir).'/';	// открываем файл на запись	// если это лог-файл, то используем команду die() в случае ошибки	// потому что команда _die() попытается сделать запись в лог, что приведет к рекурсии	if($file_name=='_fw.log'){		$f=@fopen($dir.$file_name,"w+") or die('Не могу записать файл «'.$dir.$file_name.'». Скорее всего, нет доступа.');	}else{		$f=@fopen($dir.$file_name,"w+") or _die('Не могу записать файл «'.$dir.$file_name.'». Скорее всего, нет доступа.');	}	// записываем и закрываем файл	fputs($f,$text);	fclose($f);	// меняем права если нужно	if($chmod){		if(!chmod($dir.$file_name, '0'.(int)$chmod)){			_die('не удалось изменить файлу '.$dir.$file_name.' права ('.$chomd.')');		}	}}function fsize($bytes,$lang='en'){	if($bytes<1024){		$result=$bytes.' '.(($lang=='ru')?'байт':'bytes');	}else{		$kb=$bytes/1024;		if($kb<1024){			$result=round($kb).' '.(($lang=='ru')?'Кб':'Kb');		}else{			$mb=$kb/1024;			$result=round($mb).' '.(($lang=='ru')?'Мб':'Mb');		}	}	return $result;}/* универсальная функция (аналог scandir в php 5)*/function _scandir($dir){	$src_dir=opendir($dir);	if(is_resource($src_dir)){		$result=array();		while ( ($entry=readdir($src_dir))!==false ){			$result[]=$entry;		}	}else{		die('can\'t open dir '.$dir);	}	return $result;}function smartUpload($files,$field,$path,$file_name=''){	// для html-формы	// для поля <input type="file" name="managers[csv]">	// делаем вызов:	// smartUpload($_FILES['managers'],'csv','/путь/от/корня/');	// 	// для флэша	// можно переопределить массив $_FILES	// $_FILES['name']['original']=$_FILES['Filedata']['name'];	// $_FILES['type']['original']=$_FILES['Filedata']['type'];	// $_FILES['tmp_name']['original']=$_FILES['Filedata']['tmp_name'];	// $_FILES['error']['original']=$_FILES['Filedata']['error'];	// $_FILES['size']['original']=$_FILES['Filedata']['size'];	// $result=smartUpload($_FILES,'original','/u/originals/');	if(isset($files) && !empty($files['name'][$field])){		$result=array();		if(empty($file_name)){			$original_file_name=$files['name'][$field];			//определяем имя нового файла			$result['name']=getNewFileName($original_file_name,$path);			//если имя определено, то значит и все остальные параметры будут определены			if($result['name']==''){_die('не получилось определить новое название для файла «'.$original_file_name.'»');}		}else{			$result['name']=$file_name;		}		//сохраняем файл		//_echo('$_SERVER[DOCUMENT_ROOT].$path.$result[name]='.SITE_DIR.$path.$result['name']);		if( !copy($files['tmp_name'][$field],SITE_DIR.$path.$result['name']) ){_die('не могу сохранить файл ');}		//определяем его параметры		$result['uri']=$path.$result['name'];		$result['size']=filesize(SITE_DIR.$result['uri']);		preg_match('/\.([a-z0-9]{3,4})$/',$result['name'],$matches);		$result['ext']=$matches[1];		$result['upload_date']=date('Y-m-d');	}	return $result;}function getNewFileName($original_file_name,$path){	//удаляем из названия файла русские символы	$file_name=mb_strtolower(translit($original_file_name));	//удаляем \s	$file_name=preg_replace('/[\s]/','_',$file_name);	//удаляем #	$file_name=_mb_str_replace('#','_',$file_name);	//определяем отдельно название без расширения и расширение	$rpos=mb_strrpos($file_name,'.');	$ext=mb_strtolower(mb_substr($file_name,($rpos+1)));	if(empty($ext)){_die('невозможно выделить prefix и ext из $file_name=«'.$file_name.'»');}	//преобразуем название и расширение к нижнему регистру	$prefix=mb_substr($file_name,0,$rpos);	//возможно, что название уже содержит короткую дату и даже вариант изображения	if(preg_match('/\.[0-9]{3}$/',$prefix)){		$prefix=mb_substr($prefix,0,-4);	}	if(preg_match('/\.[0-9]{6}$/',$prefix)){		$prefix=mb_substr($prefix,0,-7);	}	//добавляем к названию короткую текущую дату	$prefix=$prefix.'.'.date('ymd');		//проверяем, нет ли в $path уже такого файла	$try=1;	while(true){		$file_name=$prefix;		//если файл существует, то в названии файла будет появляться номер версии: 002 и т.д.		if($try>1){$file_name.='.'.sprintf("%03s",$try);}		$file_name.='.'.$ext;		$scriptLocation=SITE_DIR.$path.$file_name;		if(!file_exists($scriptLocation)){break;}		$try++;		if($try==1000){_die('слишком много похожих файлов');}	}	return $file_name;}/*	DEBUG*/function _print_r(){//выводит на экран аргументы, переданные через запятую, в читаемом виде	if(DEBUG!==true){return;}	$data=array();	if(func_num_args()>0){		foreach(func_get_args() as $arg){			if( func_num_args()==1 && is_array($arg) && count($arg)==1 && key($arg)=='__message__' ){				$data=$arg['__message__'];			}else{				$data[]=$arg;			}		}	}	if( !empty($data) ){		foreach($data as $item){			if(IS_AJAX!==true){				if(is_bool($item)){					_echo(chb($item));				}elseif(is_scalar($item)){					_echo($item);				}else{					echo '<pre>';					print_r($item);					echo '</pre>';				}			}else{				if(is_bool($item)){					_log(chb($item));				}elseif(is_scalar($item)){					_log($item);				}else{					_log(export($item));				}			}		}	}}function _echo($str=' ',$type=''){//выводит на экран строку и обозначает ее красным ($type=alert) или зеленым ($type=ok) или жирным ($type=bold)	if(DEBUG!==true){return;}	if(IS_AJAX!==true){		switch($type){			case 'alert':				echo '<span style="color:red;">'.$str.'<br></span>';				break;			case 'ok':				echo '<span style="color:green;">'.$str.'<br></span>';				break;			case 'bold':				echo '<b>'.$str.'<br></b>';				break;			case 'h1':			case 'h2':			case 'h3':			case 'h4':			case 'h5':			case 'h6':				echo '<'.$type.'>'.$str.'<br></'.$type.'>';				break;			default:				echo '<pre>'.$str.'</pre>';		}	}else{		_log($str);		//echo $str."\n";	}}function chb($bool){	if(DEBUG!==true){return;}	return ($bool)?'TRUE':'FALSE';}function _die(){	$message=array('__message__'=>func_get_args());	//дублируем в лог	if(DEBUG===true){		//очищаем скомпилированные шаблоны		if(is_object($GLOBALS['obj_client'])){			if( $GLOBALS['obj_client']->version()==3 ){				$GLOBALS['obj_client']->clearCompiledTemplate();			}else{				$GLOBALS['obj_client']->clear_compiled_tpl();			}		}		//выводим на экран		if(DEBUG_TRACE_ON_DIE===true) {			include_once LIB_DIR.'/debug/debug_db.php';			_log(Debug_db::debug_backtrace_smart());			_print_r(Debug_db::debug_backtrace_smart());		}		_print_r($message);		_log($message);		exit();	}else{		_log($message);		exit();	}}function _log($str_or_array){//записывает данные в журнал /admin/_fw.log	if(func_num_args()>0){		$message='';		foreach(func_get_args() as $arg){			$message.=sprintf("\n### %s\t",date('ymd H:i'));			if(is_bool($arg)){				$message.=chb($arg);			}elseif(is_scalar($arg)){				$message.=$arg;			}else{				$message.=export($arg);			}		}		// отправляем сообщение админу в любом случае		if(DEBUG_EMAIL_ERROR===true && defined('ADMIN_EMAIL') && validateEmail(ADMIN_EMAIL)){			htmlmail(ADMIN_EMAIL,'project_log FW '.SERVER_NAME,trim($message));		}		// записываем в лог в режиме отладки		if(DEBUG===true){			$log_file_dir='/admin/';			$log_file_name='_fw.log';			$log=file2str($log_file_dir,$log_file_name);			$log.=$message;			fileWrite($log_file_dir,$log_file_name,$log);		}	}}function _microtime($counter='default',$start=''){//возвращает время microtime счетчика $counter. если передан $start=true, то счетчик обнуляется	if(DEBUG!==true){return;}	if($start===true || empty($_SESSION['__microtime__'][$counter])){		$_SESSION['__microtime__'][$counter]=explode(' ',microtime());	}elseif($start===false){		unset($_SESSION['__microtime__'][$counter]);	}else{		$microtime=explode(' ',microtime());		$delta=($microtime[0]-$_SESSION['__microtime__'][$counter][0])+($microtime[1]-$_SESSION['__microtime__'][$counter][1]);		return $delta;	}}function _logm($msg,$counter='',$bool=''){//записывает в журнал /admin/_fw.log и указывает время microtime	if(DEBUG!==true){return;}	$microtime=_microtime($counter,$bool);	if($microtime==''){		_log('START '.$_SERVER['REQUEST_URI']."\n".'0 src: '.$msg);	}else{		_log("\n".$microtime.' src: '.$msg);	}}/*	ESCAPE*/function e5c($str=''){//эскейпинг уровня HTML	if( !empty($str) ){		$result=htmlspecialchars($str);		return $result;	}}function e5cflash($str=''){//эскейпим код для вставки во flash	return html4flash($str);}function e5cjs($str=''){//эскейпинг уровня JavaScript	if( !empty($str) ){		$result=$str;		$result=str_replace('\\', '\\\\', $result);		$result=str_replace("'", "\'", $result);		$result=str_replace('"', '\"', $result);		$result=str_replace("\r", "", $result);		$result=str_replace("\n", "\\n", $result);		$result=str_replace('</', '<\\/', $result);		return $result;	}}/** * Возвращает sql-запрос, с правильно заэскейпленными параметрами *  * в эту функцию может быть передан как один аргумент в виде массива,  * так и несколько аргументов в виде строк. * * @param mixed $args * @return string */function e5csql($args){	//сперва нужно преобразовать несколько строковых аргументов в массив	if(is_string($args))		$args=func_get_args();//_print_r($args);	if( !is_array($args) ){_die('$args не является массивом');}	if(count($args)==1){		$result_query=$args[0];	}else{		$query=$args[0];		$args_index=1;		$result_query='';		for($i=0;$i<mb_strlen($query);$i++){			if($query[$i]=='?' || $query[$i]=='@'){				if(isset($args[$args_index])){					$next_argument=$args[$args_index];				}else{					$next_argument='UNKNOWN_PLACEHOLDER_'.$args_index;				}				$args_index++;				if($query[$i]=='@' || is_int($next_argument) || is_double($next_argument) || mb_substr($next_argument,0,19)=='UNKNOWN_PLACEHOLDER'){					$result_query.=$next_argument;				}else{					$result_query.='\''.mysql_escape_string($next_argument).'\'';				}			}else{				$result_query.=$query[$i];			}		}	}	return $result_query;}function e5curl($url){//то же что и urlencode(), преобразует $url согласно формату RFC1738	return urlencode($url);}function e5cfile($filename){	//убираем символы /\:*?"<>| из названия файла	$symbols='/\:*?"<>|';	for($i=0;$i<mb_strlen($symbols);$i++){		$filename=str_replace(mb_substr($symbols,$i,1),'',$filename);	}	return $filename;}function _unescape($str){//функция делает декодирование данных, которые были закодированы js-функцией escape	$escape_chars = "0410 0430 0411 0431 0412 0432 0413 0433 0490 0491 0414 0434 0415 0435 0401 0451 0404 0454 0416 0436 0417 0437 0418 0438 0406 0456 0419 0439 041A 043A 041B 043B 041C 043C 041D 043D 041E 043E 041F 043F 0420 0440 0421 0441 0422 0442 0423 0443 0424 0444 0425 0445 0426 0446 0427 0447 0428 0448 0429 0449 042A 044A 042B 044B 042C 044C 042D 044D 042E 044E 042F 044F"; 	$russian_chars = "А а Б б В в Г г Ґ ґ Д д Е е Ё ё Є є Ж ж З з И и І і Й й К к Л л М м Н н О о П п Р р С с Т т У у Ф ф Х х Ц ц Ч ч Ш ш Щ щ Ъ ъ Ы ы Ь ь Э э Ю ю Я я"; 	$e = explode(" ",$escape_chars); 	$r = explode(" ",$russian_chars); 	$rus_array = explode("%u",$str); 	$new_word = str_replace($e,$r,$rus_array); 	$new_word = str_replace("%20"," ",$new_word); 	$result=implode("",$new_word);	return $result; }/*	HTML & STRINGS 	(обработка строк в широком смысле)*/function _truncate($txt,$length,$delimiter='.',$end=''){//обрезает строку по символу $delimiter до длины $length	if(mb_strlen($txt)<=$length){		return $txt;	}else{		for($i=0;$i<=$length;$i++){			if(mb_substr($txt,$i,1)==$delimiter){				$result=mb_substr($txt,0,$i);			}		}		$result.=$end;	}	return $result;}function removeWWW($url){	if(mb_substr($url,0,4)=='www.'){		$url=mb_substr($url,4);	}	return $url;}function getSiteUrl($domain){	if( USE_MULTTIDOMAINS===true ){		if( USE_SUBDOMAINS===true ){			if( $domain==DEFAULT_DOMAIN && HIDE_DEFAULT_DOMAIN===true ){				$site_url=removeSubdomain();			}else{				$result=sprintf('%s.%s',$domain,removeSubdomain());			}		}else{			if( $domain==DEFAULT_DOMAIN && HIDE_DEFAULT_DOMAIN===true ){				$site_url=removeSubdomain();			}else{				$result=sprintf('%s/~%s~',SERVER_NAME,$domain);			}		}	}else{		$result=SERVER_NAME;	}	return $result;}function removeSubdomain($server_name=''){	if( USE_MULTTIDOMAINS===true && USE_SUBDOMAINS===true ){		$domains_list=array();		if(defined('DOMAINS_LIST')){			$domains_list=_explode(DOMAINS_LIST);		}		$domains_list[]='www';		if(empty($server_name)){			$server_name=SERVER_NAME;		}		$domains=explode('.',$server_name);		if(in_array($domains[0], $domains_list)){			$domains=array_slice($domains,1);		}		$result=implode('.',$domains);	}else{		$result=SERVER_NAME;	}	return $result;}/*function br($str){//replace \r to <br>	//$result=str_replace("\r",'<br style="line-height:1em;">',$str);	$result=str_replace("\r",'<br>',$str);	return $result;}*/function roundFloat($float,$precision){//возвращает число, округленное до нужного кол-ва знаков после запятой	$result=round($float,$precision);	if($precision>0){//если вообще нужно дополнять нулями, то		$length_before_point=mb_strpos($result,'.');		if(!$length_before_point){			$length_before_point=mb_strlen($result);			$result.='.';		}		$result_length=$length_before_point+1+$precision;		$result=str_pad($result,$result_length,'0',STR_PAD_RIGHT);	}	return $result;	/*		'.r0und(1.2345,7).'<br>		'.r0und(1,7).'<br>		'.r0und(1,7).'<br>		'.(r0und(1.2345,7)+r0und(9.87,5)).'<br>		'.(round(1.2345,7)+round(9.87,5)).'<br>	*/}function formatBignum($bignum){//форматирует большие числа, добавляя сокращения "млн" или "тыс"	if($bignum){		if($bignum>1000000){			if($bignum%1000000==0){				//если остаток от деления на миллион равен нулю, то просто делим				$bignum=$bignum/1000000;			}else{				//если остаток не ноль, то округляем до первого числа после знака				$bignum=round($bignum/100000)/10;			}			$bignum.='&nbsp;млн.';		}elseif($bignum>1000){			if($bignum%1000==0){				//если остаток от деления на тысячу равен нулю, то просто делим				$bignum=$bignum/1000;			}else{				//если остаток не ноль, то округляем до первого числа после знака				$bignum=round($bignum/100)/10;			}			$bignum.='&nbsp;тыс.';		}	}	return $bignum;}function formatPrice($price){//возвращает цену либо с двумя знаками после запятой, либо вообще без дробной части	if($price==ceil($price)){		return number_format($price, 0, '.', '\'');	}else{		return number_format($price, 2, '.', '\'');	}}// 1 рубль, 2 рубля, 5 рублей, 2.3 рубля - возвращает существительное с правильным окончанием в зависимости от количестваfunction postfix($num,$str1,$str2,$str5){	$num=abs($num);	$rest=$num%10;	if( (string)$num==(string)intval($num) ){		// целое		if($rest==1 && $num%100!=11){			return $str1;		}elseif($rest>=2 && $rest<=4 && $num%100!=12 && $num%100!=13 && $num%100!=14){			return $str2;		}else{			return $str5;		}	}else{		// дробь		return $str2;	}}function translit($str,$standart=''){//осуществляет транслитерацию переданной строки	switch ($standart) {		case 'gost':			$gost = array(				"Є"=>"EH","І"=>"I","і"=>"i","№"=>"#","є"=>"eh",				"А"=>"A","Б"=>"B","В"=>"V","Г"=>"G","Д"=>"D",				"Е"=>"E","Ё"=>"JO","Ж"=>"ZH",				"З"=>"Z","И"=>"I","Й"=>"JJ","К"=>"K","Л"=>"L",				"М"=>"M","Н"=>"N","О"=>"O","П"=>"P","Р"=>"R",				"С"=>"S","Т"=>"T","У"=>"U","Ф"=>"F","Х"=>"KH",				"Ц"=>"C","Ч"=>"CH","Ш"=>"SH","Щ"=>"SHH","Ъ"=>"'",				"Ы"=>"Y","Ь"=>"","Э"=>"EH","Ю"=>"YU","Я"=>"YA",				"а"=>"a","б"=>"b","в"=>"v","г"=>"g","д"=>"d",				"е"=>"e","ё"=>"jo","ж"=>"zh",				"з"=>"z","и"=>"i","й"=>"jj","к"=>"k","л"=>"l",				"м"=>"m","н"=>"n","о"=>"o","п"=>"p","р"=>"r",				"с"=>"s","т"=>"t","у"=>"u","ф"=>"f","х"=>"kh",				"ц"=>"c","ч"=>"ch","ш"=>"sh","щ"=>"shh","ъ"=>"",				"ы"=>"y","ь"=>"","э"=>"eh","ю"=>"yu","я"=>"ya"			);			return strtr($str, $gost);			break;		default: 			$iso = array(				"Є"=>"YE","І"=>"I","Ѓ"=>"G","і"=>"i","№"=>"#","є"=>"ye","ѓ"=>"g",				"А"=>"A","Б"=>"B","В"=>"V","Г"=>"G","Д"=>"D",				"Е"=>"E","Ё"=>"YO","Ж"=>"ZH",				"З"=>"Z","И"=>"I","Й"=>"J","К"=>"K","Л"=>"L",				"М"=>"M","Н"=>"N","О"=>"O","П"=>"P","Р"=>"R",				"С"=>"S","Т"=>"T","У"=>"U","Ф"=>"F","Х"=>"X",				"Ц"=>"C","Ч"=>"CH","Ш"=>"SH","Щ"=>"SHH","Ъ"=>"'",				"Ы"=>"Y","Ь"=>"","Э"=>"E","Ю"=>"YU","Я"=>"YA",				"а"=>"a","б"=>"b","в"=>"v","г"=>"g","д"=>"d",				"е"=>"e","ё"=>"yo","ж"=>"zh",				"з"=>"z","и"=>"i","й"=>"j","к"=>"k","л"=>"l",				"м"=>"m","н"=>"n","о"=>"o","п"=>"p","р"=>"r",				"с"=>"s","т"=>"t","у"=>"u","ф"=>"f","х"=>"x",				"ц"=>"c","ч"=>"ch","ш"=>"sh","щ"=>"shh","ъ"=>"",				"ы"=>"y","ь"=>"","э"=>"e","ю"=>"yu","я"=>"ya"			);			return strtr($str, $iso);	}}function translitUrl($str){//превращает переданную строку в валидный url	$str=trim($str);	$str=str_replace(' ','_',$str);	$str=translit($str);	$str=strtolower($str);	$str=preg_replace('/[^a-z0-9_\.-]/','',$str);	return $str;}function html2flash($body){ // алиас для html4flash()	return html4flash($body);}function html4flash($body) {//подготовка HTML-кода для flash	// _echo('ЭТУ ФУНКЦИЮ html2flash() НУЖНО РЕВИЗИРОВАТЬ');	// удалим все переносы строк:	$body = str_replace("\n", '', $body);	$body = str_replace("\r", '', $body); 	// меняем теги на нижний регистр, 	$body = str_replace('<BR>','<br/>',$body);	$body = str_replace('<br>','<br/>',$body);	$body = str_replace('<P>','<br/>',$body);	$body = str_replace('<p>','<br/>',$body);	$body = str_replace('</P>','<br/>',$body);	$body = str_replace('</p>','<br/>',$body);	$body = str_replace('<B>','<b>',$body);	$body = str_replace('<STRONG>','<b>',$body);	$body = str_replace('<strong>','<b>',$body);	$body = str_replace('<IMG','<img',$body); // $body = str_replace('&lt;IMG','<img',$body); если возможна такая ситуация, то возможны аналогичные для других тегов. почему есть замена только для IMG?	$body = str_replace('<A ','<a ',$body);	$body = str_replace('</A>','</a>',$body);	// удаляем все теги, кроме допустимых во флэше	$body = strip_tags($body, '<a><b><font><i><p><u><br><br/><img>');	// делаем замену спецсимволов	$body=xmlReplace($body);	return $body;}function xmlReplace($body){	$body = str_replace('&laquo;','«',$body);	$body = str_replace('&raquo;','»',$body);	$body = str_replace('&quot;','"',$body);	$body = str_replace('&ndash;','—',$body);	$body = str_replace('&mdash;','—',$body);	$body = str_replace('&hellip;','…',$body);	$body = str_replace('&amp;laquo;','«',$body);	$body = str_replace('&amp;raquo;','»',$body);	$body = str_replace('&amp;nbsp;',' ',$body);	$body = str_replace('&nbsp;',' ',$body);	// нужно генерить флэш сразу со спецсимволами, и тогда не нужно будет делать замену « на "	// $body = str_replace('«','"',$body);	// $body = str_replace('»','"',$body);	return $body;}function generate_csv_data($data,$use_key=false,$delimiter=';'){	if(is_array($data)){		$tmpfname=tempnam(sys_get_temp_dir(),'FOO');		$temp=fopen($tmpfname,'w');		if($use_key){			$fields=array();			foreach($data[0] as $key=>$value){				$fields[]=$key;			}			fputcsv($temp,$fields,$delimiter);		}		foreach($data as $fields){			fputcsv($temp,$fields,$delimiter);		}	}	fseek($temp, 0);	$result=file_get_contents($tmpfname);	fclose($temp);	unlink($tmpfname);		return $result;}function download_csv_data($data,$use_key=false,$delimiter=';'){	$data=generate_csv_data($data,$use_key,$delimiter);	header("Content-type: application/octet-stream");	header("Content-disposition: attachment; filename=".date("Y-m-d").".csv");	echo $data;}function _mb_strtoupper($string){	// существует функция mb_strtoupper, которая работает независимо от локали 	// if(SITE_ENCODING=='UTF-8'){$string=iconv('utf-8','windows-1251',$string);_log('1',$string);$string=strtoupper($string);_log('2',$string);$string=iconv('windows-1251','utf-8',$string);_log('3',$string);}else{$string=strtoupper($string);}return $string;}function _mb_str_replace($search,$replace,$str,$count=0){	if($count>0){		$arr=explode($search,$str,$count+1);	}else{		$arr=explode($search,$str);	}	$result=implode($replace,$arr);	return $result;}function _str_replace($search,$replace,$str,$count=0){	return _mb_str_replace($search,$replace,$str,$count);}function _explode($string_to_explode,$delimiters=array(', ', ',', ' ')){	// определяем разделитель	foreach($delimiters as $item){		if(mb_strpos($string_to_explode, $item)>0){			$delimiter=$item;			break;		}	}	if(!isset($delimiter)){		// устанавливаем разделитель по-умолчанию		$delimiter=$delimiters[0];	}	$arr=explode($delimiter, $string_to_explode);	return $arr;}/*	VALIDATION*/function validateEmail($email=''){//проверяет e-mail на корректность	return (BOOL)preg_match("/^[^@\s\/\\\]+@[^@\s\/\\\]+\.[a-z]{2,}$/i", $email);}function validateUrl($url=''){//проверяет URL на корректность	$url=trim($url);	return (BOOL)preg_match("/^([a-z]+:\/\/)?[^\s]+$/i", $url);}/*	ARRAY 	(обработка массивов)*/function first($arr){//возвращает последний элемент массива	if(!is_array($arr)){return false;}	$array_keys=array_keys($arr);	return $arr[$array_keys[0]];}function last($arr){//возвращает последний элемент массива	if(!is_array($arr)){return false;}	$array_keys=array_keys($arr);	return $arr[$array_keys[count($array_keys)-1]];}function dump($var){	ob_start();	var_dump($var);	$result=ob_get_contents();	ob_end_clean();	return $result;}function export($var){	ob_start();	var_export($var);	$result=ob_get_contents();	ob_end_clean();	return $result;}function _array_merge($arr1='',$arr2=''){//замена стандартной array_merge для упрощения работы с php5	if(!is_array($arr1))$arr1=array();	if(!is_array($arr2))$arr2=array();	$result=array_merge($arr1,$arr2);	return $result;}function _array_merge_replace($arr1='',$arr2=''){//в отличие от _array_merge() не теряет ключи входящих массивов и отбрасывает элементы с повторяющимися ключами	if(!is_array($arr1))$arr1=array();	if(!is_array($arr2))$arr2=array();	foreach($arr2 as $key=>$item){		if(!array_key_exists($key,$arr1)){			$arr1[$key]=$item;		}	}	return $arr1;}/** * Срез массива *  * $arr = array(array('a'=>'aaaaa', 'b'=>'bbbbb', 'c'=>'ccccc')); * $arr2 = transformArray('a', 'b', $arr); * array('aaaaa'=>'bbbbb') * * @param mixed $keyField поле из которого берётся ключ * @param mixed $valField поле из которого берётся значение * @param array $arr * @return array */function transformArray($keyField, $valField, $arr){	$res = array();	foreach ($arr as $k=>$a)		$res[$a[$keyField]] = $a[$valField];	return $res;}/** * Групируем массив по полю * * @param mixed $group_field * @param array $input_array * @return array */function groupArray($group_field, $input_array, $remove_group_col=true){//группировка массива $input_array по значению поля $group_field, при этом само моле из результата удаляется	if(is_array($input_array) && count($input_array)>0){		$result=array();		foreach($input_array as $item){			//если в массиве $item отсутствует поле $group_field, то ничего не можем поделать...			if(array_key_exists($group_field,$item)){				//получаем значение поля				$new_key_value=$item[$group_field];				/*					закомментировал этот блок, потому что иногда неудобно брать значение из ключа					if($remove_group_col){						//удаляем это поле, теперь его значение будет ключом						unset($item[$group_field]);					}				*/				//если в результирующем массиве еще нет такого ключа, то сначала создаем его				//присваивая в качестве значения пустой массив				if(!array_key_exists($new_key_value,$result)){					$result[$new_key_value]=array();				}				//наконец, добавляем новый элемент в результирующий массив с полученным ключем				$result[$new_key_value][]=$item;			}		}	}	return$result;}/** * метод производит перегруппировку элементов массива. * в новом массиве все данные сгруппированы по одному из ключей */function kg($key,$arr){	$arr=groupArray($key,$arr);	$arr=array_keys($arr);	return $arr;}/** * возвращает строку, представляющую собой разделенные запятыми значения указанного ключа */function kgi($key,$arr){	$ids=kg($key,$arr);	$ids=implode(',',$ids);	return $ids;}function split2pairs($arr,$members_in_pair=2){	$result=array();	$pair=array();	$num=0;		foreach($arr as $key=>$item){		$num++;		$pair[$key]=$item;		if( $num==$members_in_pair ){			$num=0;			$result[]=$pair;			$pair=array();		}	}		if( !empty($pair) ){		$result[]=$pair;	}	return $result;}function std2arr($obj){	if( is_object($obj) ){		$result=array();		foreach(get_object_vars($obj) as $key=>$var){			$result[$key]=std2arr($var);		}	}elseif( is_array($obj) ){		foreach($obj as $key=>$item){			$obj[$key]=std2arr($item);		}		$result=$obj;	}else{		$result=$obj;	}	return $result;}/*	OTHER*//** * получает два значения:  * $default_value — значение по-умолчанию * $given_value — значение для проверки *  * возвращает $given_value если оно непустое * в противном случае возвращает $default_value */function defvar($default_value, $given_value){	if( is_bool($given_value) ){		$result=$given_value;	}elseif( is_numeric($given_value) ){		$result=$given_value;	}else{		$result = (string)$given_value ? $given_value : $default_value;	}	return $result;}